package ru.itmo.wp.model.repository.impl;

import ru.itmo.wp.model.database.DatabaseUtils;
import ru.itmo.wp.model.domain.Event;
import ru.itmo.wp.model.exception.RepositoryException;
import ru.itmo.wp.model.repository.BasicRepository;
import ru.itmo.wp.model.repository.EventRepository;

import javax.sql.DataSource;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class EventRepositoryImpl implements EventRepository {
    private final DataSource DATA_SOURCE = DatabaseUtils.getDataSource();

    @Override
    public void save(Event event) {
        try (Connection connection = DATA_SOURCE.getConnection()) {
            try (PreparedStatement statement = connection.prepareStatement("INSERT INTO Event (userId, type, creationTime) VALUES (?, ?, NOW())", Statement.RETURN_GENERATED_KEYS)) {
                statement.setLong(1, event.getUserId());
                statement.setString(2, event.getType().name());
                if (statement.executeUpdate() != 1) {
                    throw new RepositoryException("Can't save Event.");
                } else {
                    ResultSet generatedKeys = statement.getGeneratedKeys();
                    if (generatedKeys.next()) {
                        event.setId(generatedKeys.getLong(1));
                        try (PreparedStatement findStatement = connection.prepareStatement(
                                "SELECT creationTime FROM Event WHERE id=?")) {
                            findStatement.setLong(1, event.getId());
                            try (ResultSet resultSet = findStatement.executeQuery()) {
                                if (resultSet.next()) {
                                    event.setCreationTime(resultSet.getTimestamp("creationTime"));
                                } else {
                                    throw new RepositoryException("Can't find Event creationTime.");
                                }
                            }
                        }
                    } else {
                        throw new RepositoryException("Can't save Event [no autogenerated fields].");
                    }
                }
            }
        } catch (SQLException e) {
            throw new RepositoryException("Can't save Event.", e);
        }
    }
}